<?php
class MYPDF extends Pdf {

    public function Header() {
        // Logo
        // $image_file = K_PATH_IMAGES.'/lca_logo.png';
        // $image_file = K_PATH_IMAGES.'/school_logo.png';
        // $this->Image($image_file, 20, 10, 30, '', 'PNG', '', 'T', false, 300, '', false, false, 0, false, false, false);
        // Set font
        // $this->SetFont('helvetica', 'B', 20);

      }
    public function Footer() {
      $settings = Modules::run('main/getSet');
        // Position at 15 mm from bottom
        $this->SetY(-15);
        // Set font
        // $settings = Modules::run('main/getSet');
        $this->SetFont('times', 'I', 10);
        // Page number
        // $this->Cell(0, 10, "Prepared and generated by $settings->set_school_name Administration through e-sKwela plus 2014.", 0, false, 'R', 0, '', 0, false, 'T', 'M');
    }

}
$pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, false, 'UTF-8', false);
$pdf->SetTitle('Collection Notice');
$pdf->SetSubject('Sets of Collection Notice');
$pdf->SetKeywords('Collection Notice, SOA, Statement of Accounts');
// $pdf->SetLeftMargin(5);
// $pdf->SetRightMargin(3);

$page_format = array(
    'MediaBox' => array ('llx' => 0, 'lly' => 0, 'urx' => 190, 'ury' => 140),
    // 'CropBox' => array ('llx' => 0, 'lly' => 0, 'urx' => 104, 'ury' => 241),
    // 'BleedBox' => array ('llx' => 5, 'lly' => 5, 'urx' => 100, 'ury' => 230),
    // 'TrimBox' => array ('llx' => 10, 'lly' => 10, 'urx' => 100, 'ury' => 228),
    // 'ArtBox' => array ('llx' => 15, 'lly' => 15, 'urx' => 98, 'ury' => 225),
    // 'Dur' => 3,
    // 'trans' => array(
    //     'D' => 1.5,
    //     'S' => 'Split',
    //     'Dm' => 'V',
    //     'M' => 'O'
    // ),
    // 'Rotate' => 0,
    // 'PZ' => 1,
);

// $resolution = array(80,250);
// $fontname = $pdf->addTTFfont('/path-to-font/DejaVuSans.ttf', 'TrueTypeUnicode', '', 32);

// $pdf->SetY(45);
$pdf->SetFont('courierB', '', 13);
// $pdf->AddPage();
$pdf->AddPage('P', $page_format, false, false);
$transnum = $tlookup->trans_id;
$refnum = $tlookup->ref_number;
$act_name = $get_accounts->lastname.", ".$get_accounts->firstname;
$slevel = $get_accounts->level;
$school_year = $get_accounts->school_year;
$school_year_to = $school_year+1;
$trans_ref = $transnum;
$itemz = '';
$line_counter = 1;


$tot_charge = 0;
$tot_credit = 0;
$dc = 0;
$elogtdate = date("F d, Y [g:i:s a]");
$vdetails = '';

foreach($tdetails as $tl){ 

  $trans_refs = $tl->trans_id;

  if ($trans_refs==$trans_ref){
    $dc = $dc + 1;
    $dtl_id = $tl->detail_id;

    $itemz = $itemz.'<tr><td colspan="1"></td><td colspan="5" style="text-align:left; ">'.$tl->item_description.'</td><td></td><td colspan="4" style="text-align:right; ">'.number_format(sprintf('%0.2f', $tl->d_credit), 2, ".", ",").'</td></tr>';
    $line_counter++;
    $tot_credit = $tot_credit + $tl->d_credit;
  }
}

$total = sprintf('%0.2f', $tot_credit);

for ($i=$line_counter; $i<=6; $i++) { 
  $itemz = $itemz.'<tr><td colspan="10" style="text-align:right;">&nbsp;</td></tr>';
}

$itemz = $itemz.'<tr><td colspan="10"style="text-align:right;">'.number_format($total, 2, ".", ",").'</td></tr><tr><td colspan="10"style="text-align:right;">#:&nbsp;&nbsp;'.$refnum.'</td></tr>';

//============================================================>

function convert_number_to_words($number) {
   
    $hyphen      = '-';
    $conjunction = ' and ';
    $separator   = ', ';
    $negative    = 'negative ';
    $decimal     = ' point ';
    $dictionary  = array(
        0                   => 'Zero',
        1                   => 'One',
        2                   => 'Two',
        3                   => 'Three',
        4                   => 'Four',
        5                   => 'Five',
        6                   => 'Six',
        7                   => 'Seven',
        8                   => 'Eight',
        9                   => 'Nine',
        10                  => 'Ten',
        11                  => 'Eleven',
        12                  => 'Twelve',
        13                  => 'Thirteen',
        14                  => 'Fourteen',
        15                  => 'Fifteen',
        16                  => 'Sixteen',
        17                  => 'Seventeen',
        18                  => 'Eighteen',
        19                  => 'Nineteen',
        20                  => 'Twenty',
        30                  => 'Thirty',
        40                  => 'Fourty',
        50                  => 'Fifty',
        60                  => 'Sixty',
        70                  => 'Seventy',
        80                  => 'Eighty',
        90                  => 'Ninety',
        100                 => 'Hundred',
        1000                => 'Thousand',
        1000000             => 'Million',
        1000000000          => 'Billion',
        1000000000000       => 'Trillion',
        1000000000000000    => 'Quadrillion',
        1000000000000000000 => 'Quintillion'
    );
   
    if (!is_numeric($number)) {
        return false;
    }
   
    if (($number >= 0 && (int) $number < 0) || (int) $number < 0 - PHP_INT_MAX) {
        // overflow
        trigger_error(
            'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,
            E_USER_WARNING
        );
        return false;
    }

    if ($number < 0) {
        return $negative . convert_number_to_words(abs($number));
    }
   
    $string = $fraction = null;
   
    if (strpos($number, '.') !== false) {
        list($number, $fraction) = explode('.', $number);
    }
   
    switch (true) {
        case $number < 21:
            $string = $dictionary[$number];
            break;
        case $number < 100:
            $tens   = ((int) ($number / 10)) * 10;
            $units  = $number % 10;
            $string = $dictionary[$tens];
            if ($units) {
                $string .= $hyphen . $dictionary[$units];
            }
            break;
        case $number < 1000:
            $hundreds  = $number / 100;
            $remainder = $number % 100;
            $string = $dictionary[$hundreds] . ' ' . $dictionary[100];
            if ($remainder) {
                $string .= $conjunction . convert_number_to_words($remainder);
            }
            break;
        default:
            $baseUnit = pow(1000, floor(log($number, 1000)));
            $numBaseUnits = (int) ($number / $baseUnit);
            $remainder = $number % $baseUnit;
            $string = convert_number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];
            if ($remainder) {
                $string .= $remainder < 100 ? $conjunction : $separator;
                $string .= convert_number_to_words($remainder);
            }
            break;
    }
   
    if (null !== $fraction && is_numeric($fraction)) {
        $string .= $decimal;
        $words = array();
        foreach (str_split((string) $fraction) as $number) {
            $words[] = $dictionary[$number];
        }
        $string .= implode(' ', $words);
    }
   
    return $string;
}
//============================================================>

    $total_num = convert_number_to_words($tot_credit);
    if (strpos($total_num, " and") !== false){
        $a_count = strpos($total_num, " and");
        $lower_num = strchr($total_num, " and");
        $upper_num = substr($total_num, 0, $a_count);
    }else{
        $upper_num = convert_number_to_words($tot_credit);
        $lower_num = "";
    }

    $html = '
    <table>
        <tr><td>.</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr> 
        <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr> 
        <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr> 
       <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr> 
       <tr><td colspan="6"></td><td colspan="4" style="text-align:right; ">'.$tlookup->tdate.'</td></tr>
       <tr><td colspan="2"></td><td colspan="8" style="text-align:right; ">'.$get_accounts->lastname.', '.$get_accounts->firstname.'</td></tr>
       <tr><td colspan="1"></td><td colspan="9" style="text-align:right; ">'.$upper_num.'</td></tr>
       <tr><td colspan="7" style="text-align:center; ">'.$lower_num.'</td><td colspan="3" style="text-align:center; ">'.number_format($total, 2, ".", ",").'</td></tr>
       <tr><td colspan="2"></td><td colspan="5" style="text-align:center; ">'.$slevel.'</td><td colspan="3" style="text-align:right; ">'.$school_year.'-'.$school_year_to.'</td></tr>
       <tr><td>&nbsp;</td></tr>
        '.$itemz.'       
    </table>
    ';

    // output the HTML content
    $pdf->writeHTML($html, true, 0, true, 0);
    // $pdf->AddPage();
    // } //forloop
    // } // if($az_level==$our_level)
// } // foreach ($accountz as $az) 


// force print dialog
$js .= 'print(true);';

// set javascript
$pdf->IncludeJS($js);


// reset pointer to the last page
$pdf->lastPage();

$title = 'or.pdf';

//Close and output PDF document
$pdf->Output($title, 'I');


//============================================================+
// END OF FILE
//============================================================+

?>
